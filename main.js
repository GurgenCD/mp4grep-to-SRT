const fs = require('fs');
const { callbackify } = require('util');

try {
    // File that was generated by mp4grep is parsed from the argument of the command line into here.
    const data = fs.readFileSync(process.argv[2], 'UTF-8');

    // Split the contents by new line
    const lines = data.split(/\r?\n/);

	// Declarations
	var timestamps = [],
	 	dtimestamps = [],
		texts = [],
	 	delayedtimestamp, correcttimestamp,
		hours, minutes, seconds, index = 0,
		wstream = fs.createWriteStream(process.argv[2] +'.srt'),
		scriptstream = fs.createWriteStream(process.argv[2] + 'scriptonly.txt');
	timestamps[index] = {};
	dtimestamps[index] = {};
	texts[index] = {};
	timestamps[0] = "00:00:00,000";

	// Foreach is executed for every line within the initial mp4grep generated transcription.
    lines.forEach((line) => {

		//Regex plus some other dumb way to separate text and timing.
		let timestamp = /\[(.*?)\]/g.exec(line);
		let text =  line.substring(timestamp[1].length+3);
		let timearray = timestamp[1].split(":");

		// A dumb way to let the script know whether the timing is over an hour long, or less than.
		if(timearray.length > 2)
		{
			if(timearray[0].length = 1)
				timearray[0] = '0'.concat(timearray[0]);
			hours = timearray[0];
			if(timearray[1].length = 1)
				timearray[1] = '0'.concat(timearray[1]);
			minutes = timearray[1];
			seconds = timearray[2];
		}
		else {
			hours = "00";
			if(timearray[0].length < 2)
				timearray[0] = '0'.concat(timearray[0]);
			else;
			minutes = timearray[0];
			seconds = timearray[1];
		}

		// Smooth brain way of assembling the mp4grep timing into an .srt style timestamp.
		correcttimestamp = (hours + ":" + minutes + ":" + seconds + ",000");

		// Change the latter variable's milliseconds to "",999" if you want the first line to overlay over the next one for a second.
		delayedtimestamp = (hours + ":" + minutes + ":" + seconds + ",000");
		
		if(index==0)
		{
			// Creates a delay between reading and writing lines, that way the script knows the timings.
			index++
			return;
		}
		else if(index < lines.length)
		{

			timestamps[index] = correcttimestamp;
			dtimestamps[index] = delayedtimestamp;
			texts[index] = text;
			//console.log(index);
			// Writing a single line on every foreach() execution.
			const srtline = "\n" + index + "\n" + timestamps[index-1] + " --> " + dtimestamps[index] + "\n" + texts[index-1] + "\n";
			//console.log(srtline);
			wstream.write(srtline);
			// Script-only file, I use it specifically to be able to translate the transcription into another language without much hassle.
			// My plan is to have either another function in this script, or another script to plug translated words into the final .srt file.
			scriptstream.write(texts[index] + "ï¿½");
			index++
		}
    });



} catch (err) {
    //console.error(err);
}
